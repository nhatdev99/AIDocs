"use client";

import { useState } from "react";
import { DashboardLayout } from "@/components/layout/dashboard-layout";
import { FileUpload } from "@/components/upload/file-upload";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Loader2, File, Brain, FileText, RefreshCw, BookOpen } from "lucide-react";
import {
  processPdfWithAnalysis,
  processPdfWithSummary,
  type PdfProcessingResult
} from "@/lib/file-processors/pdf-processor";
import { FileWithPreview } from "@/types/file";

export default function PDFsPage() {
  const [selectedFile, setSelectedFile] = useState<FileWithPreview | null>(null);
  const [processingResult, setProcessingResult] = useState<PdfProcessingResult | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [activeTab, setActiveTab] = useState("upload");

  const handleFilesUploaded = (files: FileWithPreview[]) => {
    if (files.length > 0) {
      setSelectedFile(files[0]);
      setProcessingResult(null);
      setActiveTab("process");
    }
  };

  const handleAnalyze = async () => {
    if (!selectedFile) return;

    setIsProcessing(true);
    try {
      const result = await processPdfWithAnalysis(selectedFile);
      setProcessingResult(result);
      setActiveTab("results");
    } catch (error) {
      console.error("Analysis failed:", error);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleSummarize = async () => {
    if (!selectedFile) return;

    setIsProcessing(true);
    try {
      const result = await processPdfWithSummary(selectedFile);
      setProcessingResult(result);
      setActiveTab("results");
    } catch (error) {
      console.error("Summarization failed:", error);
    } finally {
      setIsProcessing(false);
    }
  };

  const resetProcessing = () => {
    setSelectedFile(null);
    setProcessingResult(null);
    setActiveTab("upload");
  };

  return (
    <DashboardLayout>
      <div className="space-y-8">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">X·ª≠ l√Ω t·ªáp PDF</h1>
          <p className="text-muted-foreground">
            T·∫£i l√™n v√† x·ª≠ l√Ω t·ªáp PDF v·ªõi ph√¢n t√≠ch b·∫±ng AI v√† t√≥m t·∫Øt.
          </p>
          <div className="mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
            <div className="flex items-start space-x-2">
              <span className="text-yellow-600 text-lg">‚ö†Ô∏è</span>
              <div className="flex-1">
                <div className="mt-2 text-xs text-yellow-600 dark:text-yellow-400">
                  üí° T√≠nh nƒÉng v·ªÅ PDFs ƒëang ƒë∆∞·ª£c t√¥i ph√°t tri·ªÉn th√™m. Vui l√≤ng s·ª≠ d·ª•ng ch·ª©c nƒÉng c·ªßa docx v√† excel. Ho·∫∑c chuy·ªÉn ƒë·ªïi t·ª´ PDF sang docx ƒë·ªÉ ph√¢n t√≠ch.
                </div>
              </div>
            </div>
          </div>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="upload">T·∫£i l√™n</TabsTrigger>
            <TabsTrigger value="process" disabled={!selectedFile}>X·ª≠ l√Ω</TabsTrigger>
            <TabsTrigger value="results" disabled={!processingResult}>K·∫øt qu·∫£</TabsTrigger>
          </TabsList>

          <TabsContent value="upload" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>T·∫£i l√™n t·ªáp PDF</CardTitle>
                <CardDescription>
                  Ch·ªçn t·ªáp PDF ƒë·ªÉ ph√¢n t√≠ch ho·∫∑c t√≥m t·∫Øt b·∫±ng AI.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <FileUpload
                  onFilesUploaded={handleFilesUploaded}
                  maxFiles={1}
                  acceptedFileTypes={['.pdf']}
                />
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>C√°c h√†nh ƒë·ªông c√≥ s·∫µn</CardTitle>
                <CardDescription>
                  Nh·ªØng g√¨ b·∫°n c√≥ th·ªÉ l√†m v·ªõi t·ªáp PDF c·ªßa b·∫°n
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid gap-4 md:grid-cols-2">
                  <div className="flex items-start space-x-3 p-4 border rounded-lg">
                    <Brain className="w-8 h-8 text-blue-500 mt-1" />
                    <div>
                      <h4 className="font-semibold">Ph√¢n t√≠ch b·∫±ng AI</h4>
                      <p className="text-sm text-muted-foreground">
                        Tr√≠ch xu·∫•t √Ω t∆∞·ªüng, x√°c ƒë·ªãnh ch·ªß ƒë·ªÅ ch√≠nh v√† hi·ªÉu c·∫•u tr√∫c t√†i li·ªáu.
                      </p>
                    </div>
                  </div>
                  <div className="flex items-start space-x-3 p-4 border rounded-lg">
                    <FileText className="w-8 h-8 text-green-500 mt-1" />
                    <div>
                      <h4 className="font-semibold">T√≥m t·∫Øt</h4>
                      <p className="text-sm text-muted-foreground">
                        T·∫°o t√≥m t·∫Øt ng·∫Øn g·ªçn n·∫Øm b·∫Øt th√¥ng tin thi·∫øt y·∫øu.
                      </p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="process" className="space-y-6">
            {selectedFile && (
              <Card>
                <CardHeader>
                  <CardTitle>T·ªáp ƒë√£ ch·ªçn</CardTitle>
                  <CardDescription>
                    Ch·ªçn c√°ch b·∫°n mu·ªën x·ª≠ l√Ω t·ªáp PDF n√†y
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center justify-between p-4 border rounded-lg bg-red-50 dark:bg-red-950">
                    <div className="flex items-center space-x-3">
                      <File className="w-8 h-8 text-red-600" />
                      <div>
                        <p className="font-medium">{selectedFile.name}</p>
                        <p className="text-sm text-muted-foreground">
                          {(selectedFile.size / 1024 / 1024).toFixed(2)} MB
                        </p>
                      </div>
                    </div>
                    <Badge variant="secondary">PDF</Badge>
                  </div>

                  <div className="grid gap-4 mt-6 md:grid-cols-2">
                    <Button
                      onClick={handleAnalyze}
                      disabled={isProcessing}
                      className="h-auto p-4 flex-col space-y-2"
                    >
                      {isProcessing ? (
                        <Loader2 className="w-6 h-6 animate-spin" />
                      ) : (
                        <Brain className="w-6 h-6" />
                      )}
                      <span>Ph√¢n t√≠ch PDF</span>
                      <span className="text-xs opacity-70">Tr√≠ch xu·∫•t √Ω t∆∞·ªüng & ch·ªß ƒë·ªÅ</span>
                    </Button>

                    <Button
                      onClick={handleSummarize}
                      disabled={isProcessing}
                      variant="outline"
                      className="h-auto p-4 flex-col space-y-2"
                    >
                      {isProcessing ? (
                        <Loader2 className="w-6 h-6 animate-spin" />
                      ) : (
                        <FileText className="w-6 h-6" />
                      )}
                      <span>T√≥m t·∫Øt</span>
                      <span className="text-xs opacity-70">T·∫°o t√≥m t·∫Øt</span>
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          <TabsContent value="results" className="space-y-6">
            {processingResult && (
              <>
                <div className="flex items-center justify-between">
                  <h2 className="text-2xl font-bold">K·∫øt qu·∫£ x·ª≠ l√Ω</h2>
                  <Button onClick={resetProcessing} variant="outline">
                    <RefreshCw className="w-4 h-4 mr-2" />
                    X·ª≠ l√Ω t·ªáp kh√°c
                  </Button>
                </div>

                {processingResult.error ? (
                  <Card className="border-red-200">
                    <CardContent className="pt-6">
                      <div className="text-center text-red-600">
                        <p className="font-medium">L·ªói x·ª≠ l√Ω</p>
                        <p className="text-sm mt-1">{processingResult.error}</p>
                      </div>
                    </CardContent>
                  </Card>
                ) : (
                  <div className="grid gap-6">
                    {/* File Info */}
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center space-x-2">
                          <BookOpen className="w-5 h-5 text-red-500" />
                          <span>Th√¥ng tin file PDF</span>
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                          <div>
                            <p className="text-sm font-medium text-muted-foreground">T√™n file</p>
                            <p className="font-medium truncate">{selectedFile?.name}</p>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-muted-foreground">S·ªë trang</p>
                            <p className="font-medium">{processingResult.pageCount}</p>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-muted-foreground">K√≠ch th∆∞·ªõc</p>
                            <p className="font-medium">
                              {(selectedFile?.size || 0) / 1024 < 1024
                                ? `${((selectedFile?.size || 0) / 1024).toFixed(1)} KB`
                                : `${((selectedFile?.size || 0) / 1024 / 1024).toFixed(1)} MB`}
                            </p>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-muted-foreground">Tr·∫°ng th√°i parsing</p>
                            <p className="font-medium">
                              {processingResult.success ? '‚úÖ Th√†nh c√¥ng' :
                                processingResult.info?.ParsingStatus ? '‚ö†Ô∏è Fallback th√¥ng minh' : '‚ùå Th·∫•t b·∫°i'}
                            </p>
                          </div>
                        </div>

                        {/* Parsing Status Warning */}
                        {processingResult.info?.ParsingStatus && (
                          <div className="mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
                            <div className="flex items-start space-x-2">
                              <span className="text-yellow-600 text-lg">‚ö†Ô∏è</span>
                              <div className="flex-1">
                                <h4 className="text-sm font-medium text-yellow-800 dark:text-yellow-200">
                                  S·ª≠ d·ª•ng n·ªôi dung d·ª± ƒëo√°n
                                </h4>
                                <p className="text-sm text-yellow-700 dark:text-yellow-300 mt-1">
                                  File PDF kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n tr·ª±c ti·∫øp. H·ªá th·ªëng ƒë√£ ph√¢n t√≠ch t√™n file
                                  ƒë·ªÉ t·∫°o n·ªôi dung d·ª± ƒëo√°n. K·∫øt qu·∫£ AI d·ª±a tr√™n th√¥ng tin n√†y c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c 100%.
                                </p>
                                <div className="mt-2 text-xs text-yellow-600 dark:text-yellow-400">
                                  üí° ƒê·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c h∆°n: S·ª≠ d·ª•ng file PDF ch·ª©a vƒÉn b·∫£n thu·∫ßn t√∫y
                                  ho·∫∑c chuy·ªÉn ƒë·ªïi file sang ƒë·ªãnh d·∫°ng Word tr∆∞·ªõc khi upload.
                                </div>
                                <div className="mt-2 text-xs text-yellow-600 dark:text-yellow-400">
                                  üí° T√≠nh nƒÉng v·ªÅ PDFs ƒëang ƒë∆∞·ª£c t√¥i ph√°t tri·ªÉn th√™m. Vui l√≤ng s·ª≠ d·ª•ng ch·ª©c nƒÉng c·ªßa docx v√† excel. Ho·∫∑c chuy·ªÉn ƒë·ªïi t·ª´ PDF sang docx ƒë·ªÉ ph√¢n t√≠ch.
                                </div>
                              </div>
                            </div>
                          </div>
                        )}

                        {/* PDF Metadata */}
                        {processingResult.info && Object.keys(processingResult.info).length > 0 && (
                          <div className="mt-4 pt-4 border-t">
                            <h4 className="text-sm font-medium mb-2">Th√¥ng tin metadata:</h4>
                            <div className="grid grid-cols-2 gap-2 text-sm">
                              {Object.entries(processingResult.info).map(([key, value]) => (
                                <div key={key}>
                                  <span className="font-medium">{key}:</span> {String(value)}
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                      </CardContent>
                    </Card>

                    {processingResult.analysis && (
                      <Card>
                        <CardHeader>
                          <CardTitle className="flex items-center space-x-2">
                            <Brain className="w-5 h-5 text-blue-500" />
                            <span>Ph√¢n t√≠ch PDF</span>
                          </CardTitle>
                        </CardHeader>
                        <CardContent>
                          <Textarea
                            value={processingResult.analysis}
                            readOnly
                            className="min-h-[200px] resize-none"
                          />
                        </CardContent>
                      </Card>
                    )}

                    {processingResult.summary && (
                      <Card>
                        <CardHeader>
                          <CardTitle className="flex items-center space-x-2">
                            <FileText className="w-5 h-5 text-green-500" />
                              <span>T√≥m t·∫Øt PDF</span>
                          </CardTitle>
                        </CardHeader>
                        <CardContent>
                          <Textarea
                            value={processingResult.summary}
                            readOnly
                            className="min-h-[150px] resize-none"
                          />
                        </CardContent>
                      </Card>
                    )}

                    {processingResult.content && (
                      <Card>
                        <CardHeader>
                          <CardTitle>N·ªôi dung vƒÉn b·∫£n ƒë∆∞·ª£c tr√≠ch xu·∫•t</CardTitle>
                          <CardDescription>
                            VƒÉn b·∫£n ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ t·ªáp PDF ƒë√£ t·∫£i l√™n
                          </CardDescription>
                        </CardHeader>
                        <CardContent>
                          <Textarea
                            value={processingResult.content}
                            readOnly
                            className="min-h-[200px] resize-none"
                          />
                        </CardContent>
                      </Card>
                    )}
                  </div>
                )}
              </>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </DashboardLayout>
  );
}
